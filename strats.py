# -*- coding: utf-8 -*-
"""Game Theory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OK7SFHAWzXz5ANRt21l5WsX0gp2Zxvcm

Let us play a game,shall we?
"""

#Character Names
# Tit-for-Tat done
# Generous tit for tat(default 90%) done
# Alway cooperate done
# Always defect done
# Friedman-if oppenent defects once-keep defecting indefinitely done
# Joss-Starts by cooperating-but copies what opponent did in the last move-but 10% of time-joss gets sneaky and defects done
# Tit for two tats
# Tester-Defects first try then cooperates-if opponent defects on next try it apologizes and plays tit for tat for the rest of the game,else tester defects every other move after that

import random

"""Tit For Tat"""

def TitForTat(arr1, arr2, index):
    if index == 0:
        arr1.append(1)
    else:
        arr1.append(arr2[-1])
    return arr1

"""Always Cooperate"""

def AlwaysCooperate(arr1,arr2,index):
  arr1.append(1)

  return arr1

"""Always Defect"""

def AlwaysDefect(arr1,arr2,index):
  arr1.append(0)
  return arr1

"""Friedman

"""

def Friedman(arr1, arr2, index):
    if index == 0:
        arr1.append(1)
    else:
        if 0 in arr2:
            arr1.append(0)
        else:
            arr1.append(1)
    return arr1

"""Joss"""

def Joss(arr1, arr2, index):

    if index == 1:

        arr1.append(1)
    else:

        if random.random() < 0.9:
            arr1.append(arr2[-1])
        else:

            arr1.append(0)
    return arr1

"""Generous T4T"""

def generous_tit_for_tat(arr1, arr2, index):

    if index == 0:
        # Start by cooperating
        arr1.append(1)
    else:
        opponent_last_move = arr2[-1]
        if opponent_last_move == 0:

            if random.random() < 0.9:
                arr1.append(0)
            else:
                arr1.append(1)
        else:

            arr1.append(1)

"""T42T"""

def tit_for_two_tats(arr1, arr2, index):
    if index == 0:
        arr1.append(1)
    elif index == 1:
        arr1.append(1 if arr2[-1] == 1 else 0)
    else:
        if arr2[-1] == 0 and arr2[-2] == 0:
            arr1.append(0)
        else:
            arr1.append(1)
    return arr1

"""Tester-Nasty"""

def tester_strategy(arr1, arr2, index):
    if index == 0:
        arr1.append(0)
    elif index == 1:
        arr1.append(1)
    elif index == 2:
        arr1.append(1 if arr2[-1] == 0 else arr2[-1])
    else:
        if arr2[-1] == 0:
            arr1.append(1)
        else:
            arr1.append(0 if index % 2 == 0 else 1)
    return arr1

def play_strategies(strategy1, strategy2, rounds):
    arr1 = []
    arr2 = []

    for i in range(rounds):
        strategy1(arr1, arr2, i)
        strategy2(arr2, arr1, i)

    score1 = 0
    score2 = 0

    for move1, move2 in zip(arr1, arr2):
        if move1 == 1 and move2 == 1:
            score1 += 3
            score2 += 3
        elif move1 == 0 and move2 == 0:
            score1 += 1
            score2 += 1
        elif move1 == 1 and move2 == 0:
            score2 += 5
        elif move1 == 0 and move2 == 1:
            score1 += 5

    return score1, score2

strategy1 = TitForTat
strategy2 = generous_tit_for_tat
rounds = 50

score1, score2 = play_strategies(strategy1, strategy2, rounds)

print("Score for Statergy 1 is",score1)
print("Score for Statergy 2 is",score2)

def play_against_strategy(your_strategy, opponent_strategy, rounds):
    your_moves = []
    opponent_moves = []

    for i in range(rounds):
        # Get user input for their move
        user_move = int(input(f"Round {i+1}: Enter your move (0 for defect, 1 for cooperate): "))
        while user_move not in [0, 1]:
            print("Invalid move. Please enter 0 for defect or 1 for cooperate.")
            user_move = int(input(f"Round {i+1}: Enter your move (0 for defect, 1 for cooperate): "))

        # Record user's move
        your_moves.append(user_move)

        # Determine opponent's move
        if i == 0:
            opponent_move = opponent_strategy([], [], i)[-1]
        else:
            opponent_move = opponent_strategy(opponent_moves, your_moves, i)[-1]

        # Record opponent's move
        opponent_moves.append(opponent_move)

    # Calculate scores
    score_your = 0
    score_opponent = 0

    for move_your, move_opponent in zip(your_moves, opponent_moves):
        if move_your == 1 and move_opponent == 1:
            score_your += 3
            score_opponent += 3
        elif move_your == 0 and move_opponent == 0:
            score_your += 1
            score_opponent += 1
        elif move_your == 1 and move_opponent == 0:
            score_opponent += 5
        elif move_your == 0 and move_opponent == 1:
            score_your += 5

    return score_your, score_opponent

rounds = 4

# Play against a strategy
your_strategy = None  # Replace with your custom strategy function if needed
opponent_strategy = TitForTat  # Replace with the strategy you want to play against

your_score, opponent_score = play_against_strategy(your_strategy, opponent_strategy, rounds)
print(f"Your strategy score: {your_score}")
print(f"Opponent's strategy score: {opponent_score}")

